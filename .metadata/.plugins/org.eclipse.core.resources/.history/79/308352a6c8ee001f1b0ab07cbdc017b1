package com.vehiclerental.security;

import java.util.Collections;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final JWTUtil jwtUtil;
    private final UserDetailsService userDetailsService;
    private final PasswordEncoder passwordEncoder;

    public SecurityConfig(JWTUtil jwtUtil, UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {
        this.jwtUtil = jwtUtil;
        this.userDetailsService = userDetailsService;
        this.passwordEncoder = passwordEncoder; // Now injected via constructor
    }

    @Bean
    http.csrf(AbstractHttpConfigurer::disable)
    .cors(AbstractHttpConfigurer::disable) 
    .authorizeHttpRequests(auth -> auth
        .requestMatchers("/auth/login", "/users/owners/add", "/users/customers/add", 
                         "/users/customers/change-password").permitAll()
        .requestMatchers("/users/admin/**").hasRole("ADMIN")
        .requestMatchers("/users/customers/**").hasRole("CUSTOMER")
        .requestMatchers("/users/owners/**").hasRole("OWNER")
        .anyRequest().authenticated()
    )
    .addFilterBefore(new JwtAuthenticationFilter(jwtUtil, userDetailsService),
                     UsernamePasswordAuthenticationFilter.class);

return http.build();
}
    @Bean
    public AuthenticationManager authenticationManager() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder);  // Ensures password matching
        return new ProviderManager(Collections.singletonList(provider));
    }

}
